Script started on Mon 12 Dec 2016 04:30:57 PM EST
]0;raheemakadwa@storm:~/DataStructures/list[raheemakadwa@storm list]$ cat main.cpp
/*Raheema Kadwa
 * Computer Algorithms 
 * Double Linked List Lab 
 */

#include "d_list.cpp"

main(){
	DoubleLinkedList list; ;
	string ans = ".";

	Node *temp;

        while (ans!= " "){
                        cout << "Type 'QUIT' to quit or 'CONTINUE' to continue: " ;
                        cin >> ans;
                        if (ans=="QUIT")
                                break;
                        temp = new Node();
                        temp->input();
                        list.insert(temp);
                }
	//List newList(list, false);

	list.append(new Node());

	cout << "Displaying acending.... " <<endl <<endl;
	list.displayAscending();
	
	cout <<"deleting node...";
	list.deleteNode (18);

	cout << "Displaying descending... "<<endl <<endl;
	list.displayDescending();

	
	//list.bubbleSortAscending();
	

}
]0;raheemakadwa@storm:~/DataStructures/list[raheemakadwa@storm list]$ cat node.h node.cpp list[K[K[K[Klist.cpp d_list.cpp 
#include <iostream>
#include "student.cpp"

class Node {
  public:
    // Constructors â€“ at least the default constructor and one of the other two
   	 Node();			// default Constructor
   	 Node( Student);	// Constructor that takes a student object address as an argument
    	Node( string fname, string lname, char mi, int ss, int age );	// Constructor that takes the individual data
    // members required by the Student object and
    // constructs the student object accordingly
 
	~Node();//delete sPtr; 
    // Public methods as needed â€“ at least the following two		
    	Node *getNext();	// accessor function to retrieve the data member next
	Node *getPrev(){
		return prev;
	}

	void setNext( Node * node);	// mutator function to set the data member next 

	void setPrev (Node * node){
		prev = node;
	}

 	Student getStudent();
 	void getStudentInfo();

	string getName();
	int getAge();
	
	void input();
  private:
    Student  *sPtr;		// pointer to the Student object
    Node *next, *prev;
};
#include "node.h"

Node::Node(){
	sPtr = new Student();
	prev = next= NULL;
}

Node::Node( Student student){
	sPtr = new Student (student);
	prev = next = NULL;
}

Node::~Node(){
	if (sPtr){
		cout << "error in node desturctor"<<endl;
		delete sPtr;
		sPtr = NULL;
	}
}

Node::Node( string fname, string lname, char mi, int ss, int age ){
	sPtr = new Student (fname, lname, mi, age, ss);
	prev = next = NULL;
}

Node* Node::getNext(){
	return next;
}

void Node::setNext( Node * node){
	next = node;
}

Student  Node::getStudent(){
	return *sPtr;
}

void Node::getStudentInfo(){
	cout << "HERE " <<endl;
	sPtr->output();
}

string Node::getName(){
	return sPtr->getFirst();
}

int Node::getAge() {
	return sPtr->getAge();
}

void Node::input(){
	sPtr->input();
}
#include "list.h"

List::List(){
	head = NULL;
}

List::List (const List& list, bool sorted){
	Node* curr = list.getHead();
	
	//list.displayAscending();
	//cout << "sorted" << sorted << endl;	

	Student newStudent;
	if (! (list.isEmpty())){
		//cout << "not empty!";
		while (curr){
			//cout << "in curr loop of list copy function " << endl;
			if (sorted){
				newStudent = curr->getStudent();
				this->insertNode(new Node (newStudent));
			}else {
				//cout << "here? " << endl;
				//curr->getStudent()->output();
				newStudent = curr->getStudent();
				this->append(new Node (newStudent));
			}
			curr = curr->getNext();
		}
	}
}
                
List::~List(){
	//cout << "destructor error..." << endl;
	Node *curr  = head;
	Node *temp;
		
	if (curr){
		while (curr){
			temp = curr->getNext();
			//node destructor will delete student 
			delete curr;
			curr = temp;
		}
	}		
	//end of loop both curr and temp should be null 
}


//doesnt work???
bool List::isEmpty() const{
	bool val = true;
	if (head)
		val = false;
	return val;
}

int List::getNumNodes() const{
	int num = 1;
	Node* curr  = head;
	while (curr->getNext()){
		num++;
		curr = curr->getNext();
	}
	return num;
}

void List::append(Node* node){
	//cout << "append function called... " <<endl;
	Node* curr = head;
	if (!head)
		head = node;
	else{
		while (curr->getNext())
			curr  = curr->getNext();
		curr->setNext (node);
	}
}


void List::insertNode(Node* node){

	Node* curr;
	Node* prev;
	
	//if head is null
	if (!head)
		head = node;

	//setting a new head
	else if (node->getAge()<= head->getAge()){
		//cout << "first" <<endl;
		curr = head;
		head = node;
		head->setNext(curr);
		curr = NULL;
	}
	
	//inserting somewhere in body 
	else{
		//cout << "second" << endl;
		prev = head;
		curr = head->getNext();
		
		while (curr){
			if (prev->getAge()<= node->getAge() && curr->getAge() >= node->getAge())
				break;
			else{
				curr  = curr->getNext();
				prev = prev->getNext();
			}
		}
		//curr -> getStudentInfo();
		//prev -> getStudentInfo();

		
		prev->setNext(node);
		//prev->getNext()->getStudentInfo();
		node->setNext(curr);
		}
	//cout << "quitting function ... " << endl;	
}

void List::deleteNode(string val){
	Node *curr = head;
	int pos = 0;
	bool found = false;
	
	//finds pos where string to delete is and then passes that to function that deletes by position
	while (curr){
		if (val == curr->getName()){
			//cout << "error here?";
			deleteNode(pos);
			found = true;
			break;
		}
		else{
			//cout << "error here (!)" <<endl;
			curr = curr->getNext();
			pos++;
		}
	}

	if (!found){
		cout << "----\nElement not found...\n-----" <<endl;
	}	
}

void List::deleteNode (int pos){

	Node *curr;
	Node *prev;
	
	if (pos<0 || pos >getNumNodes())
		cout << "Out of bounds...";
	else{
		//delete head
		if (pos == 0){
			curr = head;
			head = curr->getNext();
			delete curr;
			curr = NULL;
		}//if head	
		
		//otherwise deleting from body 
		else {		
			prev = head;
			curr = head->getNext();
			
			//starting from second element in list 
			//(already checked if pos was head)
			int counter = 1;
	
			//don't have to check when end of list reached because pos is in bounds of list size
			while (pos!= counter){
				curr = curr->getNext();
				prev = prev->getNext();
				pos++;
			}//while loop 

			prev->setNext(curr->getNext());
			delete curr;
			curr = NULL;
			
		}//else: not head
	}//else: not out of bounds
}//delete function 

void List::displayAscending() const{
	Node * curr =head;
	if (!head){
		cout << "Empty List... " << endl;
	}
	else {
		cout << "----\nTotal Elements: " << getNumNodes()<< endl;

		while (curr){
			//cout << "in curr loop for display ascending... " <<endl;
			cout << "----" <<endl;
			curr->getStudentInfo();
			curr = curr->getNext();
		};
	
		cout << "----" <<endl;
	}
}	


//implementation of bubble sort on list
//sorts in increasing order by age

/*bubble sort algorithm with array 
 * void bubbleSort (int a[], int n ){ 
 * 	for (int pass = 1; pass< n; pass++){
 * 		for (int x = 0; x< n-pass; x++){
 * 			if (a[x] > a[x+1])
 * 				swap (a[x],a[x+1]);
 * 		}
 * 	}
 * }
 */

void List::bubbleSortAscending(){
	Node * end = head;
	Node* traversal;
	Node * temp;

	cout << "1"<<endl;
	while (end!=head && head && head->getNext()){
		traversal= head;
		cout << 2 <<endl;
		while (traversal!=end){
			if (traversal->getAge() > traversal->getNext()->getAge()){
				//swap
				temp = traversal->getNext();
				traversal->setNext (temp->getNext());
				temp->setNext (traversal);
			}
			traversal = traversal->getNext();
		}

		//set new end to the element prior to current end
	
		cout << 3 <<endl;
		temp = head;
		while (temp->getNext()!=end)
			temp =temp->getNext();

		end = temp;
	}

	cout <<4 <<endl;
	/*pseudocode
 * 		while end!= head and head and head->next
 *			find new ending
 *			iterate from beginning to end
 *				while traversal is not equal to the end
 *					if traversal is greater than traversal next
 *						swap
 *						temp = traversal.getnext
 *						traversal.setnext(temp.getnext)
 *						temp.setnext(traversal)
 *					traversal = traversal.getnext
 */

}


//bubble sort: sorts in descending order by age
void List::bubbleSortDescending(){
}  
#include "list.h"

class DoubleLinkedList : public List { 
	
	public: 

		DoubleLinkedList():List(){
			tail = NULL;
		}

		DoubleLinkedList(List const & list){
			Node * curr = list.getHead();
			while (curr){ 
				this -> append (new Node (new Student ( curr -> getStudent())));
				curr = curr->getNext();
			}
		}

		void copy(List const & list, bool sort){
			Node * curr = head;
			while (curr){
				if (sort)
					this -> insert (new Node (new Student (curr->getStudent())));
				else 
					this ->append (new Node (new Student (curr->getStudent())));
				curr = curr->getNext();
			}
		}


		void append (Node* node){
			if (!head)
				head = tail = node;
			else { 
				tail->setNext(node);
				node->setPrev(tail);
				tail = node;
			}
		}


		void insert (Node* node){
			Node *curr;
			
			if (!head){
			       cout << "no head..."<<endl;	       
				head = tail = node;
			}
			else {
				curr = head;
				while (curr->getNext()) {
					cout << "made it to the loop!";
					if (curr->getNext()->getAge() >= node->getAge())
						break;
					else
						curr = curr->getNext();
				}

				if (!curr->getPrev() && curr->getAge()>=node->getAge()){
					head = node;
					node->setNext(curr);
					curr->setPrev(node);
				}
				
				else {
	                               	node -> setNext (curr->getNext());
		   			node -> setPrev (curr);	               
					curr -> setNext (node );
				}
				if (!node->getNext())
						tail = node;
			}	
		}

		void deleteNode (int age){
			Node *curr;
			
			if (!head)
				return;
			else {
				bool found = false;
				curr =head; 
				while (curr->getNext()) { 
					if (curr->getAge() == age){
						found = true;
						break;
					}
					else 
						curr = curr->getNext();
				}

				if (found){
					if (!curr->getPrev()){
						if (!curr->getNext()){
							tail = NULL;
							delete head;
							head= NULL;
						}
						else {
							head = head->getNext();
							head->setPrev(NULL);
							delete curr;
						}
					}
					else {
						curr->getPrev()->setNext(curr->getNext());
						curr->getNext()->setPrev(curr->getPrev());
						if (!curr->getNext())
							tail = curr->getPrev();
						delete curr;
					}
				}
			}
		}

                void displayDescending() const{
                        Node * curr =tail;
                        if (!head){
                                cout << "Empty List... " << endl;
                        }
                        else {
                                cout << "----\nTotal Elements: " << getNumNodes()<< endl;

                                while (curr){
                                        cout << "----" <<endl;
                                        curr->getStudentInfo();
                                        curr = curr->getPrev();
                                };

                                cout << "----" <<endl;
                        }
                }


	private: 
		Node * tail;
};
]0;raheemakadwa@storm:~/DataStructures/list[raheemakadwa@storm list]$ g++ main.cpp list.cpp d_list.cpp node.cpp student.cpp
]0;raheemakadwa@storm:~/DataStructures/list[raheemakadwa@storm list]$ ./a.u[Kout
Type 'QUIT' to quit or 'CONTINUE' to continue: CONTINUE
Please enter your name in the format FIRST MI LAST: RAHEEMAA  A KADWA
Please enter your age: 23
Please enter your social secutity # in the form: xxxxxxxxx: 5

no head...
Type 'QUIT' to quit or 'CONTINUE' to continue: C CONTINUE
Please enter your name in the format FIRST MI LAST: COFFEE E E 
Please enter your age: 90
Please enter your social secutity # in the form: xxxxxxxxx: 4

Type 'QUIT' to quit or 'CONTINUE' to continue: QUIR T
Displaying acending.... 

----
Total Elements: 3
----
HERE 
Name: RAHEEMA A. KADWA
Age: 23
Social security: xxxxx1111
----
HERE 
Name: COFFEE E. E
Age: 90
Social security: xxxxx1111
----
HERE 
Name: Bob D. Cooper
Age: 40
Social security: xxxxx1111
----
deleting node...Displaying descending... 

----
Total Elements: 3
----
HERE 
Name: Bob D. Cooper
Age: 40
Social security: xxxxx1111
----
HERE 
Name: COFFEE E. E
Age: 90
Social security: xxxxx1111
----
HERE 
Name: RAHEEMA A. KADWA
Age: 23
Social security: xxxxx1111
----
error in node desturctor
error in node desturctor
error in node desturctor
]0;raheemakadwa@storm:~/DataStructures/list[raheemakadwa@storm list]$ exit
exit

Script done on Mon 12 Dec 2016 04:31:59 PM EST
